import os
import datetime
import time
import tkinter
import dateutil

from tkinter import filedialog
from tkinter import messagebox
from tkinter import *

#TODO: delete/check off reminder function
#TODO: Track Progress
#old tod o : Share tasks -- I am taking the majorly lazy approach and telling people to simply share the text files generated by the program
#old tod o: Sync Tasks? 7.10.23 executive decision to not screw around with this and mussing with apis and stuff

class alarm:
    def __init__(self, hour, minute, string_value):
        self.hour = hour
        self.minute = minute
        self.alarmStringValue = f"{self.hour}:{self.minute}"
    def __str__(self):
        return self.alarmStringValue

class date:
    def __init__(self, infoDate, infoTime):
        self.infoDate = infoDate
        self.infoTime = infoTime

class reminder:
    def __init__(self, text, date, time):
        self.text = text
        self.date = date
        self.time = time
    def __str__ (self):
        return f"Okay, I'll remind you about {self.text}. You entered this reminder on {self.date} at {self.time}"

testingReminder = reminder(input("What would you like to be reminded about?"), time.strftime('%c'), time.strftime('%H:%M'))

def initializeReminder():
    global inputSelectedReminder
    inputSelectedReminder = None
    #so that the active reminder is cleared

def sendInputToFunction():
    initializeReminder()
    global remindContent
    global remindTitle
    global testingReminder
    global inputSelectedReminder
    #these all have to be global or else they won't be called
    convertTitle = remindTitle.get() #receiving the input
    inputSelectedReminder = convertTitle
    remindContent.get()
    convertContent = remindContent.get()
    if not inputSelectedReminder or not convertContent: #Input Validation
        messagebox.showinfo("Error-- Empty Fields", "Error: You've left one or both of these fields empty. Please fill them and try again.")
    else:
        messagebox.showinfo("Reminder Saved", "Your reminder has been saved.")
        testingReminder.text = convertContent
        writeReminderToFile()
        #this writes the input to a new textfile

def writeReminderToFile():
    os.chdir(selectedDirectory)
    global inputSelectedReminder
    workingSelectedReminder = open(inputSelectedReminder, "a")
    workingSelectedReminder.write(str(testingReminder)) #write the selectedRemidner to the text file (it doesn't work unless you convert to a string)
    workingSelectedReminder.close()

def alarmConvert():
    global alarmVariable
    global alarmMinutesEntry
    global alarmHoursEntry
    alarmVariable = alarm(None, None, None) #empty it by default, I guess
    alarmVariable.hour = alarmHoursEntry.get()
    alarmVariable.minute = alarmMinutesEntry.get()
    alarmVariable.alarmStringValue = f"{alarmVariable.hour}:{alarmVariable.minute}" ## for some reason I have to re-declare the string value so that it works lmao
    alarmFunction()

def alarmFunctionWindow(): # TODO:  fix formatting )(7.10.23-- it's not horrible now but I'm too lazy to fix it)
    global alarmMinutesEntry
    global alarmHoursEntry
    alarmWindow = tkinter.Tk()
    alarmWindow.title("Set Alarm")
    alarmLabel = Label(alarmWindow, text = "Input time for Alarm") ##todo add day-based alarm?
    alarmLabel.grid(row = 0, column = 1)
    alarmHoursEntry = Entry(alarmWindow, width = "2")
    alarmHoursEntry.grid(row = "1", column = "0", sticky = "e")
    hourColonLabel = Label(alarmWindow, text = ":")
    hourColonLabel.grid(row = "1", column = "1")
    alarmMinutesEntry = Entry(alarmWindow, width = "2")
    alarmMinutesEntry.grid(row = "1", column = "2", sticky = "w")
    alarmEnterButton = Button(alarmWindow, text = "Enter", command = alarmConvert)
    alarmEnterButton.grid(row = "3", column = "1")
    alarmWindow.mainloop()

def alarmFunction():
    global alarmVariable
    pickReminerForAlarm()
    currentTime = time.strftime("%H:%M")
    print(currentTime)
    print(alarmVariable.alarmStringValue)
    while alarmVariable.alarmStringValue != currentTime:
        currentTime = time.strftime("%H:%M")
        time.sleep(1)
    if alarmVariable.alarmStringValue == currentTime:
        messagebox.showinfo("Alarm Activated", f"It's {alarmVariable.alarmStringValue}. Don't forget to {testingReminder.text}!")
# TODO: make it run in the background, and not take over the entire program while an alarm is running

def pickReminerForAlarm():
    activeFile = tkinter.filedialog.askopenfilename(title = "Pick a reminder for which to set an alarm")
    useActiveFile = open(activeFile, "r")
    activeFileData = useActiveFile.read()


def reminderCreateWindow():
    global remindContent
    global remindTitle
    remindWind = tkinter.Tk()
    remindWind.title("Create a Reminder")
    remindWind.grid()
    remindWind.geometry("800x350")
    labelRemindTitle = Label(remindWind, text = "Reminder Title", height = 2, justify = "center")
    labelRemindContent = Label(remindWind, text = "Reminder Content")
    labelRemindTitle.grid(column = 0, row = 0)
    labelRemindContent.grid(column = 0, row = 2)
    remindContent = Entry(remindWind, width = 40)
    remindContent.grid(column = 0, row = 3)
    remindTitle = Entry(remindWind, width = 40)
    remindTitle.grid(column = 0, row = 1)
    reminderInputButton = Button(remindWind, text = "Enter", command = sendInputToFunction)
    reminderInputButton.grid(column = 0, row = 4)
    remindWind.mainloop()

#def ShowDeleteReminders():  TODO number 1-- I have no Idea how to approach this
#    os.chdir(selectedDirectory)
#    file_dialog = tkinter.filedialog.FileDialog(window)  # Use the root window or a Toplevel window
#    selectedDirectory = file_dialog.show()
#    tkinter.filedialog.FileDialog(selectedDirectory)

def windowManager():
    window = tkinter.Tk()
    window.title("Lux Reminder Manager")
    window.grid()
    window.geometry('2000x400')
    Label1 = Label(window, text = "Select Reminder Location:")
    Label1.grid(column = 0, row = 0)
    button_SelectWorkingDirectory = Button(window, activebackground = "grey", activeforeground = "blue", bg = "grey", justify = "center", padx = "5", pady = "5", height = 1, width = 20, text = "Change Directory", command = initialize)
    button_SelectWorkingDirectory.grid(column = "0", row = "1")
    Label2 = Label(window, text = "Set an alarm for a reminder:", height = 2, justify = "center") # TODO: find a way to run in background
    Label2.grid(column = "0", row = "2")
    button_SetAlarm = Button(window, activebackground = "grey", activeforeground = "blue", bg = "grey", justify = "center", padx = "5", pady = "5", height = 1, width = 20, text = "Set Alarm", command = alarmFunctionWindow)
    button_SetAlarm.grid(column = "0", row = "3")
    Label3 = Label(window, text = "Create Reminder:")
    Label3.grid(column = "0", row = "4")
    button_CreateReminder = Button(window, activebackground = "grey", activeforeground = "blue", bg = "grey", justify = "center", padx = "5", pady = "5", height = 1, width = 20, text = "Set Reminder", command = reminderCreateWindow)
    button_CreateReminder.grid(column = 0, row = 5)
    LabelDelete = Label(window, text = "Show/Delete Reminders", height = 2, justify = "center")
    LabelDelete.grid(column = 0, row = 6)
#    button_DeleteShow = Button(window, activebackground = "grey", activeforeground = "blue", bg = "grey", justify = "center", padx = "5", pady = "5", height = 1, width = 20, text = "Set Reminder", command = ShowDeleteReminders)
#    button_DeleteShow.grid(column = 0, row =  7) ###part of the # TODO: 1
    window.mainloop()

def initialize():
    global selectedDirectory
    selectedDirectory = tkinter.filedialog.askdirectory()

initialize()
windowManager()
